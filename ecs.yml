---
# Cannot get this to work for some reason
#AWSTemplateFormatVersion: AWSTemplateFormatVersion: '2010-09-09'

Description: This template creates a new EC2 Container Service (ECS) into an existing VPC.

Metadata:
    Foo:
        Description: 'something clever'
    Bar:
        Description: 'something clever'

# These show up in the console and are expected to be provided by the operator
Parameters:
    Project:
        Description: 'Project name this cluster is has been created for'
        Type: 'String'
        Default: 'Weapon X'

    Creator:
        Description: 'Tool or person creating this cluster'
        Type: 'String'
        Default: 'CloudFormation'

    Environment:
        Description: 'Context the cluster will be used in.  Common values are production, testing and development.'
        Type: 'String'
        Default: 'development'

    Notes:
        Description: 'Notes to apply, normally edited in the console.'
        Type: 'String'
        Default: 'No notes'

    SshKeyName:
        Description: 'Name of the key to use when creating the EC2 instances'
        Type: 'String'
        Default: 'asgard-lite-test'

    InstanceType:
        Description: 'How large of a box to run your containers on'
        Type: 'String'
        Default: 't2.micro'

    ECSRole:
        Description: 'IAM Role to launch the EC2 instances with'
        Type: 'String'
        Default: 'ecsInstanceRole'

    PublicSubnetZoneA:
        Description: 'Public subnet ID to place the ECS instance into'
        Type: 'String'
        Default: 'subnet-ddad6394'

    PrivateSubnetZoneA:
        Description: 'Private subnet ID to place the ECS instance into'
        Type: 'String'
        Default: 'subnet-dcad6395'

    PublicSubnetZoneB:
        Description: 'Public subnet ID to place the ECS instance into'
        Type: 'String'
        Default: 'subnet-9bbe0afc'

    PrivateSubnetZoneB:
        Description: 'Private subnet ID to place the ECS instance into'
        Type: 'String'
        Default: 'subnet-9abe0afd'

    SecurityGroup:
        Description: 'Security Group to place around the ECS instances'
        Type: 'String'
        Default: 'sg-f748298f'


Mappings:
    # these AMIs change regularly.  Check http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    RegionToAmazonAMI:
        us-east-1:
            HVM64: ami-b2df2ca4
        us-east-2:
            HVM64: ami-832b0ee6
        us-west-1:
            HVM64: ami-dd104dbd
        us-west-2:
            HVM64: ami-022b9262

Resources:
    # Create the cluster
    Cluster:
        Type: 'AWS::ECS::Cluster'
        Properties:
            # cluster names must adhere to this expression: ^[a-zA-Z0-9\-_]{1,255}$
            ClusterName: !Join [ '-', [ !Ref 'AWS::StackName', 'Cluster' ] ]

    # create a public ECS optimized EC2 instance into Zone A
    InstancePublicZoneA:
        Type: AWS::EC2::Instance
        Properties:
            EbsOptimized: false
            IamInstanceProfile:
                Ref: 'ECSRole'
            ImageId:
                Fn::FindInMap:
                    - RegionToAmazonAMI
                    - Ref: 'AWS::Region'
                    - HVM64
            InstanceInitiatedShutdownBehavior:  stop
            InstanceType:
                Ref: 'InstanceType'
            KeyName:
                Ref: 'SshKeyName'
            Monitoring: False
            SecurityGroupIds:
                - !Ref 'SecurityGroup'
            SourceDestCheck: true
            SubnetId:
                Ref: 'PublicSubnetZoneA'
            Tenancy: default
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'ECS', 'Public Zone A', !Ref 'AWS::StackName' ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Docker'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'Runs ECS Agent and Docker'
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe
                    echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config

    # create a private ECS optimized EC2 instance into Zone A
    InstancePrivateZoneA:
        Type: AWS::EC2::Instance
        Properties:
            EbsOptimized: false
            IamInstanceProfile:
                Ref: 'ECSRole'
            ImageId:
                Fn::FindInMap:
                    - RegionToAmazonAMI
                    - Ref: 'AWS::Region'
                    - HVM64
            InstanceInitiatedShutdownBehavior:  stop
            InstanceType:
                Ref: 'InstanceType'
            KeyName:
                Ref: 'SshKeyName'
            Monitoring: False
            SecurityGroupIds:
                - !Ref 'SecurityGroup'
            SourceDestCheck: true
            SubnetId:
                Ref: 'PrivateSubnetZoneA'
            Tenancy: default
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'ECS', 'Private Zone A', !Ref 'AWS::StackName' ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Docker'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'Runs ECS Agent and Docker'
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe
                    echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config

    # create a public ECS optimized EC2 instance into Zone B
    InstancePublicZoneB:
        Type: AWS::EC2::Instance
        Properties:
            EbsOptimized: false
            IamInstanceProfile:
                Ref: 'ECSRole'
            ImageId:
                Fn::FindInMap:
                    - RegionToAmazonAMI
                    - Ref: 'AWS::Region'
                    - HVM64
            InstanceInitiatedShutdownBehavior:  stop
            InstanceType:
                Ref: 'InstanceType'
            KeyName:
                Ref: 'SshKeyName'
            Monitoring: False
            SecurityGroupIds:
                - !Ref 'SecurityGroup'
            SourceDestCheck: true
            SubnetId:
                Ref: 'PublicSubnetZoneB'
            Tenancy: default
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'ECS', 'Public Zone B', !Ref 'AWS::StackName' ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Docker'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'Runs ECS Agent and Docker'
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe
                    echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config

    # create a private ECS optimized EC2 instance into Zone B
    InstancePrivateZoneB:
        Type: AWS::EC2::Instance
        Properties:
            EbsOptimized: false
            IamInstanceProfile:
                Ref: 'ECSRole'
            ImageId:
                Fn::FindInMap:
                    - RegionToAmazonAMI
                    - Ref: 'AWS::Region'
                    - HVM64
            InstanceInitiatedShutdownBehavior:  stop
            InstanceType:
                Ref: 'InstanceType'
            KeyName:
                Ref: 'SshKeyName'
            Monitoring: False
            SecurityGroupIds:
                - !Ref 'SecurityGroup'
            SourceDestCheck: true
            SubnetId:
                Ref: 'PrivateSubnetZoneB'
            Tenancy: default
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'ECS', 'Private Zone B', !Ref 'AWS::StackName' ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Docker'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'Runs ECS Agent and Docker'
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe
                    echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config


Outputs:
    Cluster:
        Description: 'EC2 Container Service Cluster ID'
        Value:
            Ref: 'Cluster'
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', Cluster ] ]
    PublicEcsAddressA:
        Description: 'Public IP address of the zone A ECS instance'
        Value: !GetAtt InstancePublicZoneA.PublicIp
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', PublicEcsAddressA ] ]
    PrivateEcsAddressA:
        Description: 'Private IP address of the zone A ECS instance'
        Value: !GetAtt InstancePublicZoneA.PrivateIp
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', PrivateEcsAddressA ] ]
    PublicEcsAddressB:
        Description: 'Public IP address of the zone B ECS instance'
        Value: !GetAtt InstancePublicZoneB.PublicIp
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', PublicEcsAddressB ] ]
    PrivateEcsAddressB:
        Description: 'Private IP address of the zone B ECS instance'
        Value: !GetAtt InstancePublicZoneB.PrivateIp
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', PrivateEcsAddressB ] ]
